#summary How to use klystrack
#labels Featured

<wiki:toc max_depth="3" />

=Menu=

Hold right mouse button down to bring up the menu bar. Select the menu option by hovering over it and release right button.

=Pattern editor=

The pattern editor works like a standard tracker. Basically, each pattern is a queue of notes and parameters. 

{{{
     instrument
note |  ______ legato, slide, vibrato
 |   | |||
C-4 00 LSV 0000 <--- track command
}}}

If a note is set for a pattern step, a new note will be played when the player position hits the row. The instrument column tells which instrument to use. The note will continue playing until the volume is set to zero, the envelope fades out or a note-off command is encountered in the note column. 

The [Commands track commands] modify the sound with effects like portamento, vibrato or volume fade.

=Instrument editor=

==Instrument program==

When an instrument is triggered, the program starts executing from the beginning. The execution speed is independent from the song speed but relative to the routine update frequency. The program period instrument parameter controls how many routine updates it takes to advance the program one step.

A program modifies the played waveform and can be used to create more interesting sounds. The commands are the same as the [Commands track commands]. This means the program can also be thought as a macro: you do not need to enter the same track commands if the instrument executes has the same commands in the program. 

The program can be edited by moving to the program and pressing return on the instruction you want to edit.

The following example is a simple 0-4-7 major arpeggio:

|| {{{00 00 0000}}} || set arpeggio note to 0 (the same note as played) || 
|| {{{01 01 0004}}} || set arpeggio note to 4 (played note plus 4 semitones) || 
|| {{{02 02 0007}}} || set arpeggio note to 7|| 
|| {{{03 03 ff00}}} || jump back to step 00 || 

A handy way to debug instrument programs is to set the program period (execution speed) to 10 or more and then pay attention to the little marker that shows current program tick. That way you'll notice if e.g. a jump doesn't point to the correct command.

==Combining commands==

In the following example, the first three commands are executed inside the same program tick. This can be achieved by entering the commands and pressing space to combine the command with the command below.

|| {{{00 00 000c ,}}} || set arpeggio note to +12 semitones|| 
|| {{{01    0102 |}}} || portamento up by 2/256 semitones|| 
|| {{{02    0710 '}}} || pw down by 10 steps || 
|| {{{03 01 ff00}}} || go to beginning || 

Note how the second column doesn't follow the leftmost column. I.e. when played, all commands are executed at step 00. When the next step (01 in the second column) is executed, it will be the jump command at 03, skipping past the two commands combined with 

=Sequence editor=

The sequence is the place where all the patterns are put together to form a song structure. Each channel can use any of the patterns, the patterns are not locked to a certain channel nor do the patterns lock to other patterns. A pattern can be used as many times as needed, you do not need to duplicate the pattern data unless you want to make little changes. Only one pattern can play at the same time on the same channel, obviously.

{{{
pattern
 |  position offset
 |  |
01+01
}}}

In the above example the pattern position is not a multiple of sequence pattern step, thus the offset is shown. 

Generally, one uses the sequence editor to enter patterns of similar length side by side and then jumps back and forth between the pattern editor and the sequence editor using the return key.

== Effects ==

See [Effects].